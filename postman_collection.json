{
	"info": {
		"_postman_id": "4fe5f2e8-2d62-45ec-afa7-5ec154fc87e2",
		"name": "FlyNext",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "42913915"
	},
	"item": [
		{
			"name": "Ezio",
			"item": [
				{
					"name": "account",
					"item": [
						{
							"name": "Login Account",
							"request": {
								"auth": {
									"type": "jwt",
									"jwt": {
										"payload": "{\r\n    \"uid\": \"WhbY3DCkzR\"\r\n}",
										"secret": "aCcEsS",
										"algorithm": "HS256",
										"isSecretBase64Encoded": false,
										"addTokenTo": "header",
										"headerPrefix": "Bearer",
										"queryParamKey": "token",
										"header": "{}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"password\": \"123456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:3000/api/account/[uid]/login",
								"description": "Primarily generated by Postbot:\n\n### Request\n\nThis endpoint allows a user with the uid \"\\[uid\\]\" to log in to their account using a POST request. The request should include a \"password\" parameter in the request body.\n\n- `uid` (path parameter) : The uid of the user.\n    \n\nThe request body should be in JSON format with the following key-value pair:\n\n- \"password\": \\[string\\] The password for the customer's account.\n    \n\n### Response\n\nThe response to the request is in JSON format with a status code of 200. The response body contains a \"tokens\" object with a refresh token (24h expiry) and an access token (1h expiry)\n\nExample response body:\n\n``` json\n{\n    \"tokens\": {\n        \"refreshToken\": \"\",\n        \"accessToken\": \"\"\n    }\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "Update Profile",
							"request": {
								"auth": {
									"type": "jwt",
									"jwt": {
										"payload": "{\r\n    \"uid\": \"customer_1\"\r\n}",
										"secret": "aCcEsS",
										"algorithm": "HS256",
										"isSecretBase64Encoded": false,
										"addTokenTo": "header",
										"headerPrefix": "Bearer",
										"queryParamKey": "token",
										"header": "{}"
									}
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "profilePic",
											"type": "file",
											"src": []
										},
										{
											"key": "firstName",
											"value": "firstName1",
											"type": "text"
										},
										{
											"key": "lastName",
											"value": "lastName1",
											"type": "text"
										},
										{
											"key": "email",
											"value": "email1@dom1.com",
											"type": "text"
										},
										{
											"key": "phoneNumber",
											"value": "9999999999",
											"type": "text"
										}
									]
								},
								"url": "http://localhost:3000/api/account/[uid]",
								"description": "Primarily generated by Postbot:\n\n### Update Account Details\n\nThis endpoint allows you to update the account details for a specific user.\n\n- `uid` (path parameter) : The uid of the user.\n    \n\n#### Request Body Parameters\n\n- `profilePic` (file): The profile picture of the user.\n    \n- `firstName` (text): The first name of the user.\n    \n- `lastName` (text): The last name of the user.\n    \n- `email` (text): The email address of the user.\n    \n- `phoneNumber` (text): The phone number of the user.\n    \n\n#### Response\n\nUpon successful update, the endpoint returns a status code of 200 along with a JSON response containing:\n\n- `message`: A message indicating the success of the update.\n    \n- `tokenUpdates`: A new access token and a new refresh token if the request only provides a valid refresh token."
							},
							"response": []
						},
						{
							"name": "Create Account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"registration\": {\r\n        \"email\": \"email1.@example.com\", \r\n        \"password\": \"password1\",\r\n        \"firstName\": \"firstName1\",\r\n        \"lastName\": \"lastName\",\r\n        \"phoneNumber\": \"111\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:3000/api/account/register",
								"description": "Primarily generated by Postbot:\n\nThe endpoint allows users to register a new account by providing their information. The email and the password are required.\n\n### Request Body\n\n- `email` (string): The email address of the user.\n    \n- `password` (string): The password for the new account.\n    \n- `firstName` (string): The first name of the user.\n    \n- `lastName` (string): The last name of the user.\n    \n- `phoneNumber` (string): The phone number of the user.\n    \n\n### Response\n\nThe response is in JSON format and includes the following fields:\n\n- `uid` (string): The unique identifier for the newly registered account.\n    \n- `tokens` (object): An object containing the refresh token and access token for the registered account.\n    \n    - `refreshToken` (string): The refresh token for the registered account.\n        \n    - `accessToken` (string): The access token for the registered account.\n        \n\n### JSON Schema\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"uid\": {\n      \"type\": \"string\"\n    },\n    \"tokens\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"refreshToken\": {\n          \"type\": \"string\"\n        },\n        \"accessToken\": {\n          \"type\": \"string\"\n        }\n      }\n    }\n  }\n}\n\n ```"
							},
							"response": []
						}
					],
					"description": "Account and Profile"
				},
				{
					"name": "hotel",
					"item": [
						{
							"name": "room",
							"item": [
								{
									"name": "Get Room Availabilities",
									"request": {
										"auth": {
											"type": "jwt",
											"jwt": {
												"payload": "{\r\n    \"uid\": \"owner_1\"\r\n}",
												"secret": "aCcEsS",
												"algorithm": "HS256",
												"isSecretBase64Encoded": false,
												"addTokenTo": "header",
												"headerPrefix": "Bearer",
												"queryParamKey": "token",
												"header": "{}"
											}
										},
										"method": "GET",
										"header": [],
										"url": "http://localhost:3000/api/hotel/[hid]/room",
										"description": "Primarily generated by Postbot:\n\n### GET /api/hotel/\\[hid\\]/room\n\nThis endpoint retrieves a hotel's detailed room availability info for a hotel's owner.\n\n#### Request\n\nNo request body is required for this request.\n\n- Path Parameters\n    \n    - hid (string, required): The ID of the hotel for which the rooms are being retrieved.\n        \n\n#### Response\n\nThe response is in JSON format and will have the following schema:\n\n``` json\n{\n    \"rooms\": [\n        {\n            \"id\": \"\",\n            \"name\": \"\",\n            \"type\": \"\",\n            \"amenities\": \"\",\n            \"pricePerNight\": 0,\n            \"availability\": 0,\n            \"createdAt\": \"\",\n            \"updatedAt\": \"\",\n            \"hotelId\": \"\",\n            \"roomAvailability\": [\n                {\n                    \"roomId\": \"\",\n                    \"date\": \"\",\n                    \"availability\": 0\n                }\n            ],\n            \"rangedAvailability\": 0\n        }\n    ],\n    \"tokenUpdates\": null\n}\n\n ```\n\n- `rooms` (array): An array of room objects containing details such as ID, name, type, amenities, price per night, availability, creation and update timestamps, hotel ID, room availability, and ranged availability.\n    \n- `tokenUpdates`: A new access token and a new refresh token if the request only provides a valid refresh token."
									},
									"response": []
								},
								{
									"name": "Define New Room Type",
									"request": {
										"auth": {
											"type": "jwt",
											"jwt": {
												"payload": "{\r\n    \"uid\": \"owner_1\"\r\n}",
												"secret": "aCcEsS",
												"algorithm": "HS256",
												"isSecretBase64Encoded": false,
												"addTokenTo": "header",
												"headerPrefix": "Bearer",
												"queryParamKey": "token",
												"header": "{}"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "name",
													"value": "room1",
													"type": "text"
												},
												{
													"key": "type",
													"value": "SINGLE",
													"type": "text"
												},
												{
													"key": "amentities",
													"value": "",
													"type": "text"
												},
												{
													"key": "pricePerNight",
													"value": "999",
													"type": "text"
												},
												{
													"key": "availability",
													"value": "111",
													"type": "text"
												},
												{
													"key": "roomImg",
													"type": "file",
													"src": []
												},
												{
													"key": "roomImg",
													"type": "file",
													"src": []
												}
											]
										},
										"url": "http://localhost:3000/api/hotel/[hid]/room",
										"description": "Primarily generated by Postbot:\n\nThis HTTP POST request allows an owner to add a new room to a specific hotel identified by the 'hid' parameter in the URL. The request should include a form-data body with the following parameters:\n\n- `name`: (text) The name of the room.\n    \n- `type`: (text) The type of the room.\n    \n- `amentities`: (text) The amenities available in the room.\n    \n- `pricePerNight`: (text) The price per night for the room.\n    \n- `availability`: (text) The availability status of the room.\n    \n- `roomImg`: (file) Images of the room.\n    \n\nThe response to this request will be in JSON format with a status code of 200. The response body will include the following fields:\n\n- `message`: A message regarding the success or failure of the operation.\n    \n- `imgSaveFailed`: A boolean indicating whether the images were all saved.\n    \n- `tokenUpdates`: A new access token and a new refresh token if the request only provides a valid refresh token."
									},
									"response": []
								},
								{
									"name": "Change Room Availability",
									"request": {
										"auth": {
											"type": "jwt",
											"jwt": {
												"payload": "{\r\n    \"uid\": \"owner_1\"\r\n}",
												"secret": "aCcEsS",
												"algorithm": "HS256",
												"isSecretBase64Encoded": false,
												"addTokenTo": "header",
												"headerPrefix": "Bearer",
												"queryParamKey": "token",
												"header": "{}"
											}
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"availabilityUpdate\": {\r\n        \"room\": {\r\n            \"name\": \"Deluxe Suite\",\r\n            \"type\": \"SINGLE\"\r\n        },\r\n        \"availability\": 10\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "http://localhost:3000/api/hotel/hotel_1/room",
										"description": "Primarily generated by Postbot:\n\n### Update Hotel Room Availability\n\nThis endpoint allows the owner to update the availability of a specific room in a hotel.\n\n#### Request Body\n\n- `availabilityUpdate` (object)\n    \n    - `room` (object)\n        \n        - `name` (string): The name of the room.\n            \n        - `type` (string): The type of the room.\n            \n    - `availability` (number): The updated availability number of the room.\n        \n\n#### Response\n\nThe response is in JSON format and follows the schema below:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"message\": {\n      \"type\": \"string\"\n    },\n    \"tokenUpdates\": {\n      \"type\": \"null\"\n    }\n  }\n}\n\n ```"
									},
									"response": []
								}
							],
							"description": "Owner manage hotel rooms"
						},
						{
							"name": "booking",
							"item": [
								{
									"name": "Get Hotel Bookings",
									"request": {
										"auth": {
											"type": "jwt",
											"jwt": {
												"payload": "{\r\n    \"uid\": \"owner_1\"\r\n}",
												"secret": "aCcEsS",
												"algorithm": "HS256",
												"isSecretBase64Encoded": false,
												"addTokenTo": "header",
												"headerPrefix": "Bearer",
												"queryParamKey": "token",
												"header": "{}"
											}
										},
										"method": "GET",
										"header": [],
										"url": "http://localhost:3000/api/hotel/[hid]/booking",
										"description": "Primarily generated by Postbot:\n\n### GET /api/hotel/\\[hid\\]/booking\n\nThis endpoint retrieves all bookings of a specific hotel for its owner.\n\n#### Request\n\nNo request body is required for this endpoint.\n\n- `hid` (path parameter) : The hid of the hotel for which the bookings are to be retrieved.\n    \n\n#### Response\n\nThe response is in JSON format and has the following schema:\n\n``` json\n{\n    \"bookings\": [\n        {\n            \"id\": \"\",\n            \"checkInDate\": \"\",\n            \"checkOutDate\": \"\",\n            \"status\": \"\",\n            \"type\": \"\",\n            \"createdAt\": \"\",\n            \"updatedAt\": \"\",\n            \"userId\": \"\",\n            \"hotelId\": \"\",\n            \"roomId\": \"\",\n            \"flightReference\": null,\n            \"itineraryId\": \"\"\n        }\n    ],\n    \"tokenUpdates\": null\n}\n\n ```\n\n- `bookings` (array): An array of booking objects containing details such as ID, check-in and check-out dates, status, type, creation and update timestamps, user ID, hotel ID, room ID, flight reference, and itinerary ID.\n    \n- StartFragment`tokenUpdates`: A new access token and a new refresh token if the request only provides a valid refresh token.EndFragment"
									},
									"response": []
								},
								{
									"name": "Cancel a Hotel Booking",
									"request": {
										"auth": {
											"type": "jwt",
											"jwt": {
												"payload": "{\r\n    \"uid\": \"owner_1\"\r\n}",
												"secret": "aCcEsS",
												"algorithm": "HS256",
												"isSecretBase64Encoded": false,
												"addTokenTo": "header",
												"headerPrefix": "Bearer",
												"queryParamKey": "token",
												"header": "{}"
											}
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"bookingIds\": [\"booking_1\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "http://localhost:3000/api/hotel/[hid]/booking",
										"description": "Primarily generated by Postbot:\n\nThis HTTP PATCH request is for a owner to cancel the bookings for a specific hotel. The request should be made to [http://localhost:3000/api/hotel/[hid]/booking](http://localhost:3000/api/hotel/[hid]/booking), where \\[hid\\] is the unique identifier for the hotel. The request body should be in raw format and include a JSON payload with the key \"bookingIds\" and an array of booking IDs to be cancelled, for example: {\"bookingIds\":\\[\"booking_1\"\\]}.\n\n### Request Body\n\n- bookingIds (array of strings): An array of booking IDs to be updated.\n    \n\nThe response to this request will have a status code of 200 and a content type of application/json. The response body will include a message and tokenUpdates, where message is a string indicating the result of the operation.\n\n### Response Body\n\n- message (string): A message indicating the result of the operation.\n    \n- `tokenUpdates`: A new access token and a new refresh token if the request only provides a valid refresh token."
									},
									"response": []
								}
							],
							"description": "Owner manage hotel bookings"
						},
						{
							"name": "Create Hotel",
							"request": {
								"auth": {
									"type": "jwt",
									"jwt": {
										"payload": "{\r\n    \"uid\": \"customer_1\"\r\n}",
										"secret": "aCcEsS",
										"algorithm": "HS256",
										"isSecretBase64Encoded": false,
										"addTokenTo": "header",
										"headerPrefix": "Bearer",
										"queryParamKey": "token",
										"header": "{}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "logo",
											"type": "file",
											"src": []
										},
										{
											"key": "name",
											"value": "hotel1",
											"type": "text"
										},
										{
											"key": "address",
											"value": "addr1",
											"type": "text"
										},
										{
											"key": "city",
											"value": "city1",
											"type": "text"
										},
										{
											"key": "starRating",
											"value": "1",
											"type": "text"
										},
										{
											"key": "hotelImg",
											"type": "file",
											"src": []
										},
										{
											"key": "hotelImg",
											"type": "file",
											"src": []
										}
									]
								},
								"url": "http://localhost:3000/api/hotel",
								"description": "Primarily generated by Postbot:\n\n### Add Hotel\n\nThis endpoint allows you to add a new hotel with the provided details.\n\n#### Request Body\n\n- `logo` (file): The logo of the hotel.\n    \n- `name` (text): The name of the hotel.\n    \n- `address` (text): The address of the hotel.\n    \n- `city` (text): The city where the hotel is located.\n    \n- `starRating` (text): The star rating of the hotel.\n    \n- `hotelImg` (file): An image of the hotel (up to 9).\n    \n\n#### Response\n\nUpon successful execution, the server will respond with a status code of 200 and a JSON object containing the following fields:\n\n- `message`: A message indicating the status of the operation.\n    \n- `imgSaveFailed`: A boolean value indicating whether the images are all saved.\n    \n- `hid`: The hid of the newly added hotel.\n    \n- `tokenUpdates`: A new access token and a new refresh token if the request only provides a valid refresh token."
							},
							"response": []
						}
					],
					"description": "Hotel Management"
				},
				{
					"name": "booking",
					"item": [
						{
							"name": "Get Bookings",
							"request": {
								"auth": {
									"type": "jwt",
									"jwt": {
										"payload": "{\r\n    \"uid\": \"customer_1\"\r\n}",
										"secret": "aCcEsS",
										"algorithm": "HS256",
										"isSecretBase64Encoded": false,
										"addTokenTo": "header",
										"headerPrefix": "Bearer",
										"queryParamKey": "token",
										"header": "{}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "http://localhost:3000/api/booking",
								"description": "Primarily generated by Postbot:\n\nThis endpoint makes an HTTP GET request to retrieve all booking information of a user (given the associated token) from the server.\n\n### Request\n\nNo request body parameters are required for this endpoint.\n\n### Response\n\n- Status: 200\n    \n- Content-Type: application/json\n    \n\nThe response body includes the following fields:\n\n- `bookings`: An array of booking information.\n    \n- `itineraries`: An array of itinerary details.\n    \n- `afsFailed`: A boolean value indicating if there was a failure linking the AFS system.\n    \n- `tokenUpdates`: A new access token and a new refresh token if the request only provides a valid refresh token."
							},
							"response": []
						},
						{
							"name": "Cancel Booking",
							"request": {
								"auth": {
									"type": "jwt",
									"jwt": {
										"payload": "{\r\n    \"uid\": \"customer_1\"\r\n}",
										"secret": "aCcEsS",
										"algorithm": "HS256",
										"isSecretBase64Encoded": false,
										"addTokenTo": "header",
										"headerPrefix": "Bearer",
										"queryParamKey": "token",
										"header": "{}"
									}
								},
								"method": "PATCH",
								"header": [],
								"url": "http://localhost:3000/api/booking/[id]",
								"description": "Primarily generated by Postbot:\n\n### Cancel Booking Details\n\nThis endpoint is used to cancel a specific booking identified by its unique ID for the associated user.\n\n#### Request Body\n\nnone\n\n#### Response\n\n- Status: 200\n    \n- Content-Type: application/json\n    \n- `message`: A message indicating the success of the cancellation\n    \n- `tokenUpdates`: A new access token and a new refresh token if the request only provides a valid refresh token."
							},
							"response": []
						}
					],
					"description": "User manage existing bookings"
				}
			]
		},
		{
			"name": "Kenson",
			"item": [
				{
					"name": "Flight Search - Basic",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/flights_search/flights?origin=Toronto&destination=Zurich&date=2024-11-17",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"flights_search",
								"flights"
							],
							"query": [
								{
									"key": "origin",
									"value": "Toronto"
								},
								{
									"key": "destination",
									"value": "Zurich"
								},
								{
									"key": "date",
									"value": "2024-11-17"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Flight Search - With ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/flights_search/flights?origin=Toronto&destination=Zurich&date=2024-11-17&id=bd7ee4df-004d-4c95-abda-633d276a5842",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"flights_search",
								"flights"
							],
							"query": [
								{
									"key": "origin",
									"value": "Toronto"
								},
								{
									"key": "destination",
									"value": "Zurich"
								},
								{
									"key": "date",
									"value": "2024-11-17"
								},
								{
									"key": "id",
									"value": "bd7ee4df-004d-4c95-abda-633d276a5842"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Flight Search - With Return Date",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/flights_search/flights?origin=Toronto&destination=Zurich&date=2024-11-17&returnDate=2024-11-18",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"flights_search",
								"flights"
							],
							"query": [
								{
									"key": "origin",
									"value": "Toronto"
								},
								{
									"key": "destination",
									"value": "Zurich"
								},
								{
									"key": "date",
									"value": "2024-11-17"
								},
								{
									"key": "returnDate",
									"value": "2024-11-18"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Auto-complete",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/auto-complete?query=Winnipeg",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"auto-complete"
							],
							"query": [
								{
									"key": "query",
									"value": "Winnipeg"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Flight Booking",
					"request": {
						"auth": {
							"type": "jwt",
							"jwt": {
								"secret": "aCcEsS",
								"payload": "{\n    \"uid\":\"customer_1\"\n}",
								"isSecretBase64Encoded": false,
								"algorithm": "HS256",
								"addTokenTo": "header",
								"headerPrefix": "Bearer",
								"queryParamKey": "token",
								"header": "{}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Smith\",\n  \"email\": \"customer@example.com\",\n  \"passportNumber\": \"123239934\",\n  \"flightId\": \"046c6a43-5b1c-4021-adec-ea8d8e59b970\",\n  \"itineraryId\" : \"itinerary_1\"\n}"
						},
						"url": "http://localhost:3000/api/book/flight"
					},
					"response": []
				},
				{
					"name": "Hotel Booking",
					"request": {
						"auth": {
							"type": "jwt",
							"jwt": {
								"secret": "aCcEsS",
								"payload": "{\n    \"uid\":\"customer_1\"\n}",
								"isSecretBase64Encoded": false,
								"algorithm": "HS256",
								"addTokenTo": "header",
								"headerPrefix": "Bearer",
								"queryParamKey": "token",
								"header": "{}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"customer_1\",\n  \"hotelId\": \"hotel_1\",\n  \"roomId\": \"room_1\",\n  \"checkInDate\": \"2020-12-11\",\n  \"checkOutDate\": \"2020-12-14\"\n}"
						},
						"url": "http://localhost:3000/api/book/hotel"
					},
					"response": []
				},
				{
					"name": "Checkout",
					"request": {
						"auth": {
							"type": "jwt",
							"jwt": {
								"secret": "aCcEsS",
								"payload": "{\n    \"uid\":\"customer_1\"\n}",
								"isSecretBase64Encoded": false,
								"algorithm": "HS256",
								"addTokenTo": "header",
								"headerPrefix": "Bearer",
								"queryParamKey": "token",
								"header": "{}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"customer_1\",\n  \"cardNumber\": \"4111111111111111\",\n  \"expiryDate\": \"12/25\",\n  \"cvv\": \"123\",\n  \"totalAmount\": 100,\n  \"itineraryId\": \"itinerary_1\",\n  \"bookingIds\": [\"booking_1\"]\n}"
						},
						"url": "http://localhost:3000/api/book/checkout"
					},
					"response": []
				},
				{
					"name": "Flight Suggestions",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"origin\": \"Toronto\",\n  \"return_on_checkout\": true,\n  \"hotelId\": \"hotel_1\",\n  \"checkInDate\": \"2024-11-20\",\n  \"checkOutDate\": \"2024-11-25\"\n}"
						},
						"url": "http://localhost:3000/api/suggestion/flights"
					},
					"response": []
				},
				{
					"name": "Hotel Suggestions",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"city\": \"New York\",\n  \"checkIn\": \"2024-11-20\",\n  \"checkOut\": \"2024-11-25\"\n}"
						},
						"url": "http://localhost:3000/api/suggestion/hotels"
					},
					"response": []
				}
			]
		},
		{
			"name": "William",
			"item": [
				{
					"name": "search hotel by check-in date, check-out date, and city, and no additional filter",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/hotel_search/search?city=Toronto&checkInDate=2025-03-10&checkOutDate=2025-03-15",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"hotel_search",
								"search"
							],
							"query": [
								{
									"key": "city",
									"value": "Toronto"
								},
								{
									"key": "checkInDate",
									"value": "2025-03-10"
								},
								{
									"key": "checkOutDate",
									"value": "2025-03-15"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search hotel by check-in date, check-out date, and city, also apply name filter",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/hotel_search/search?city=Toronto&checkInDate=2025-03-10&checkOutDate=2025-03-15&name=Grand%20Hotel",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"hotel_search",
								"search"
							],
							"query": [
								{
									"key": "city",
									"value": "Toronto"
								},
								{
									"key": "checkInDate",
									"value": "2025-03-10"
								},
								{
									"key": "checkOutDate",
									"value": "2025-03-15"
								},
								{
									"key": "name",
									"value": "Grand%20Hotel"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search hotel by by check-in date, check-out date, and city, also apply star rating filter",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/hotel_search/search?city=Toronto&checkInDate=2025-03-10&checkOutDate=2025-03-15&starRating=5",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"hotel_search",
								"search"
							],
							"query": [
								{
									"key": "city",
									"value": "Toronto"
								},
								{
									"key": "checkInDate",
									"value": "2025-03-10"
								},
								{
									"key": "checkOutDate",
									"value": "2025-03-15"
								},
								{
									"key": "starRating",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search hotel by check-in date, check-out date, and city, and apply price filter",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/hotel_search/search?city=Toronto&checkInDate=2025-03-10&checkOutDate=2025-03-15&minPrice=100&maxPrice=250",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"hotel_search",
								"search"
							],
							"query": [
								{
									"key": "city",
									"value": "Toronto"
								},
								{
									"key": "checkInDate",
									"value": "2025-03-10"
								},
								{
									"key": "checkOutDate",
									"value": "2025-03-15"
								},
								{
									"key": "minPrice",
									"value": "100"
								},
								{
									"key": "maxPrice",
									"value": "250"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search hotel by check-in date, check-out date, and city, and apply all filter",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/hotel_search/search?city=Toronto&checkInDate=2025-03-10&checkOutDate=2025-03-15&name=Grand&starRating=5&minPrice=100&maxPrice=300",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"hotel_search",
								"search"
							],
							"query": [
								{
									"key": "city",
									"value": "Toronto"
								},
								{
									"key": "checkInDate",
									"value": "2025-03-10"
								},
								{
									"key": "checkOutDate",
									"value": "2025-03-15"
								},
								{
									"key": "name",
									"value": "Grand"
								},
								{
									"key": "starRating",
									"value": "5"
								},
								{
									"key": "minPrice",
									"value": "100"
								},
								{
									"key": "maxPrice",
									"value": "300"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get the hotel information by hotelId",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/hotel_search/information?hotelId=hotel_1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"hotel_search",
								"information"
							],
							"query": [
								{
									"key": "hotelId",
									"value": "hotel_1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get the hotel room availability for each day",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/hotel_search/availability?hotelId=hotel_1&checkInDate=2025-03-10&checkOutDate=2025-03-15",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"hotel_search",
								"availability"
							],
							"query": [
								{
									"key": "hotelId",
									"value": "hotel_1"
								},
								{
									"key": "checkInDate",
									"value": "2025-03-10"
								},
								{
									"key": "checkOutDate",
									"value": "2025-03-15"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get the notification for current user",
					"request": {
						"auth": {
							"type": "jwt",
							"jwt": {
								"secret": "aCcEsS",
								"payload": "{\n    \"uid\":\"customer_1\"\n}",
								"isSecretBase64Encoded": false,
								"algorithm": "HS256",
								"addTokenTo": "header",
								"headerPrefix": "Bearer",
								"queryParamKey": "token",
								"header": "{}"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/notifications?unreadOnly=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"notifications"
							],
							"query": [
								{
									"key": "unreadOnly",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "mark the notification id as read",
					"request": {
						"auth": {
							"type": "jwt",
							"jwt": {
								"secret": "aCcEsS",
								"payload": "{\n    \"uid\":\"customer_1\"\n}",
								"isSecretBase64Encoded": false,
								"algorithm": "HS256",
								"addTokenTo": "header",
								"headerPrefix": "Bearer",
								"queryParamKey": "token",
								"header": "{}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"notificationId\": \"notif_3\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:3000/api/notifications/read"
					},
					"response": []
				}
			]
		}
	]
}